{"version":3,"sources":["Countdown.js","Quotes.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calcNextCSNDay","calcCSNDay","state","csnDay","days","nextCSNDay","daysOfMonth","hours","Date","getHours","minutes","getMinutes","seconds","getSeconds","dayText","hourText","minuteText","secondText","csnToday","setInterval","isItCSN","setState","console","log","getDate","_this2","csnMonth","getMonth","currentYear","getFullYear","currentDay","axios","get","then","response","data","dagar","length","veckodag","catch","error","_this3","react_default","a","createElement","react_confetti_min_default","numberOfPieces","run","Component","Quotes","quote","quoter","Qu_Quote","Qu_Quoter","quoteAuthor","quoteText","className","App","src_Countdown","src_Quotes","href","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a164ef7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport Confetti from 'react-confetti'\n\n\n\nclass Countdown extends Component {\n    constructor() {\n        super();\n        this.calcNextCSNDay();\n        this.calcCSNDay();\n        this.state = {\n            csnDay: \"\",\n            days: \"\",\n            nextCSNDay: 24,\n            daysOfMonth: \"\",\n            hours: 23 - (new Date().getHours()),\n            minutes: 59 - (new Date().getMinutes()),\n            seconds: 59 - (new Date().getSeconds()),\n            dayText: \"Days\",\n            hourText: \"Hours\",\n            minuteText: \"Minutes\",\n            secondText: \"Seconds\",\n            csnToday: false\n        };\n\n        setInterval(() => {\n            this.isItCSN()\n            if (!(this.state.csnToday)) {\n                if ((new Date().getDate() < this.state.csnDay + 1)) {\n                    this.setState(() => ({\n                        days: this.state.csnDay - new Date().getDate()\n                    }))\n                }\n                else {\n                    this.setState(() => ({\n                        days: this.state.daysOfMonth - (new Date().getDate() - this.state.nextCSNDay)\n                    }))\n                }\n                this.setState(() => ({\n                    hours: 23 - (new Date().getHours()),\n                    minutes: 59 - (new Date().getMinutes()),\n                    seconds: 59 - (new Date().getSeconds())\n                }))\n                if (this.state.days === 1) {\n                    this.setState(() => ({\n                        dayText: \"Day\"\n                    }))\n                }\n                else if (this.state.hours === 1) {\n                    this.setState(() => ({\n                        hourText: \"Hour\"\n                    }))\n                }\n                else if (this.state.minutes === 1) {\n                    this.setState(() => ({\n                        minuteText: \"Minute\"\n                    }))\n                }\n                else if (this.state.seconds === 1) {\n                    this.setState(() => ({\n                        secondText: \"Second\"\n                    }))\n                }\n                else {\n                    this.setState(() => ({\n                        dayText: \"Days\",\n                        hourText: \"Hours\",\n                        minuteText: \"Minutes\",\n                        secondText: \"Seconds\",\n                    }))\n                }\n            }\n            else {\n                this.setState(() => ({\n                    days: \"\",\n                    hours: \"\",\n                    minutes: \"\",\n                    seconds: \"\",\n                    dayText: \"It's CSN time!!\",\n                    hourText: \"\",\n                    minuteText: \"\",\n                    secondText: \"\",\n                }))\n                console.log(this.state.csnToday)\n            }\n        }, 100);\n\n    }\n    isItCSN() {\n        if (this.state.csnDay + 1 === new Date().getDate()) {\n            this.setState(() => ({\n                csnToday: true\n            }))\n        } else {\n            this.setState(() => ({\n                csnToday: false\n            }))\n        }\n    }\n    //Calculates which date CSN comes\n    calcCSNDay() {\n        let csnMonth = new Date().getMonth() + 1;\n        let currentYear = new Date().getFullYear();\n        let currentDay = new Date().getDate();\n        let csnDay = 24;\n        console.log((new Date().getMonth()) + 1)\n        axios.get('https://api.dryg.net/dagar/v2.1/' + currentYear + '/' + csnMonth)\n            .then((response) => {\n                // handle success\n                console.log(response.data.dagar.length);\n                console.log(response);\n                console.log(response);\n                console.log(currentDay);\n                while ((\"Lördag\" === response.data.dagar[csnDay].veckodag) ||\n                    (\"Söndag\" === response.data.dagar[csnDay].veckodag) ||\n                    (response.data.dagar[csnDay][\"röd dag\"] === \"Ja\")) {\n                    csnDay--;\n                }\n                this.setState(() => ({\n                    csnDay: csnDay,\n                    daysOfMonth: response.data.dagar.length\n                }))\n                this.setState(() => ({\n                    days: csnDay - currentDay\n                }))\n\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n        if (currentDay >= csnDay) {\n\n        }\n    }\n    calcNextCSNDay() {\n        let csnMonth = new Date().getMonth() + 2;\n        let currentYear = new Date().getFullYear();\n        let csnDay = 24;\n        console.log((new Date().getMonth()) + 2)\n        axios.get('https://api.dryg.net/dagar/v2.1/' + currentYear + '/' + csnMonth)\n            .then((response) => {\n                // handle success\n                console.log(response);\n                while ((\"Lördag\" === response.data.dagar[csnDay].veckodag) ||\n                    (\"Söndag\" === response.data.dagar[csnDay].veckodag) ||\n                    (response.data.dagar[csnDay][\"röd dag\"] === \"Ja\")) {\n                    csnDay--;\n                }\n                this.setState(() => ({\n                    nextCSNDay: csnDay,\n                    days: this.state.daysOfMonth - (new Date().getDate() - csnDay)\n                }))\n                console.log(this.state.nextCSNDay);\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n\n    }\n    render() {\n        return (\n            <div>\n                <p>{this.state.days + \" \" + this.state.dayText}</p>\n                <p>{this.state.hours + \" \" + this.state.hourText}</p>\n                <p>{this.state.minutes + \" \" + this.state.minuteText}</p>\n                <br />\n                <p>{this.state.seconds + \" \" + this.state.secondText}</p>\n\n                <Confetti numberOfPieces=\"300\" run={this.state.csnToday} />\n            </div >\n        );\n    }\n}\n\nexport default Countdown","import React, { Component } from 'react'\nimport axios from 'axios'\n\n\nclass Quotes extends Component {\n    constructor() {\n        super();\n        this.state = {\n            quote: \"\",\n            quoter: \"\"\n        }\n    }\n    componentDidMount1() {\n        axios.get('http://130.239.178.50:3002/random_quote')\n\n            .then((response) => {\n                // handle success\n                console.log(response);\n                console.log(response.data[0].Qu_Quote)\n                this.setState({\n                    quote: response.data[0].Qu_Quote,\n                    quoter: response.data[0].Qu_Quoter\n                })\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    }\n    componentDidMount() {\n        axios.get('https://quota.glitch.me/random')\n\n            .then((response) => {\n                // handle success\n                console.log(response);\n                console.log(response.data.quoteAuthor)\n                console.log(response.data.quoteText)\n                this.setState({\n                    quote: response.data.quoteText,\n                    quoter: response.data.quoteAuthor\n                })\n\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"quote\">\"{this.state.quote}\"</p>\n                <p className=\"quoter\">- {this.state.quoter}</p>\n            </div>\n        )\n    }\n}\n\nexport default Quotes","import React, { Component } from 'react';\nimport Countdown from './Countdown.js'\nimport './App.css';\nimport Quotes from './Quotes.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" >\n\n        <div className=\"intro-text\">\n          <p>When is CSN due?</p>\n          <hr />\n        </div>\n        <div className=\"timer\">\n          <Countdown />\n        </div>\n        <div className=\"qoute-of-the-day\">\n          <Quotes></Quotes>\n        </div>\n        <div className=\"link-csn\">\n          <a href=\"https://www.csn.se/\" target=\"_blank\"> <br /> Click here to visit CSNs website</a>\n          <div className=\"jonathan\">\n            <p>By Jonathan Hedlund</p>\n            <a href=\"https://jonathanhedlund.com/\" target=\"_blank\">www.jonathanhedlund.com</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}